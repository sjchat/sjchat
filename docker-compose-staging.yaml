version: "3"
services:
 queue:
    image: rabbitmq:3.6.9
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    ports:
      - "5672:5672"
    networks:
      - webnet

  restapi:
    image: sjchat/sjchat-restapi
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 600M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - "8080:8080"
    logging:
      driver: gcplogs
    networks:
      - webnet
    depends_on:
      - queue
      - message-service
      - user-service

  message-service:
    image: sjchat/sjchat-message-service
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 200M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - "50052:50052"
    logging:
      driver: gcplogs
    networks:
      - webnet
    depends_on:
      - database
      - user-service
      - queue

  database:
    image: mongo:3.4.4
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    ports:
      - "27017:27017"
    logging:
      driver: gcplogs
    networks:
      - webnet

  user-service:
    image: sjchat/sjchat-user-service
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 200M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - "50051:50051"
    logging:
      driver: gcplogs
    networks:
      - webnet
    depends_on:
      - database

  web-client:
    image: sjchat/sjchat-web-client
    ports:
      - "8082:80"
    logging:
      driver: gcplogs
    networks:
      - webnet

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet:
